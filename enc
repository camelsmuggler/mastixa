param(
    [Parameter(Mandatory=$true)]
    [string]$FileInput
)

# Hardcoded encryption key
$KeyString = "Encrypt93"

# Function to derive a proper AES key from the string
function Get-AESKey {
    param([string]$KeyString)
    
    # Create a proper 256-bit key using SHA256
    $sha256 = [System.Security.Cryptography.SHA256]::Create()
    $key = $sha256.ComputeHash([System.Text.Encoding]::UTF8.GetBytes($KeyString))
    $sha256.Dispose()
    return $key
}

# Function to encrypt a file
function Encrypt-File {
    param(
        [string]$InputFile,
        [string]$OutputFile,
        [byte[]]$Key
    )
    
    try {
        # Create AES object
        $aes = [System.Security.Cryptography.Aes]::Create()
        $aes.Key = $Key
        $aes.Mode = [System.Security.Cryptography.CipherMode]::CBC
        $aes.Padding = [System.Security.Cryptography.PaddingMode]::PKCS7
        $aes.GenerateIV()
        
        # Create encryptor
        $encryptor = $aes.CreateEncryptor()
        
        # Read input file in chunks to handle large files
        $inputStream = [System.IO.File]::OpenRead($InputFile)
        $outputStream = [System.IO.File]::Create($OutputFile)
        
        # Write IV to the beginning of the output file
        $outputStream.Write($aes.IV, 0, $aes.IV.Length)
        
        # Create CryptoStream
        $cryptoStream = New-Object System.Security.Cryptography.CryptoStream(
            $outputStream, 
            $encryptor, 
            [System.Security.Cryptography.CryptoStreamMode]::Write
        )
        
        # Buffer for reading/writing (1MB chunks)
        $buffer = New-Object byte[] 1048576
        $bytesRead = 0
        
        Write-Host "Encrypting file: $InputFile" -ForegroundColor Yellow
        
        do {
            $bytesRead = $inputStream.Read($buffer, 0, $buffer.Length)
            if ($bytesRead -gt 0) {
                $cryptoStream.Write($buffer, 0, $bytesRead)
            }
        } while ($bytesRead -gt 0)
        
        Write-Host "Encryption completed. Output: $OutputFile" -ForegroundColor Green
        
    }
    catch {
        Write-Error "Encryption failed: $($_.Exception.Message)"
        throw
    }
    finally {
        # Clean up resources
        if ($cryptoStream) { $cryptoStream.Close() }
        if ($inputStream) { $inputStream.Close() }
        if ($outputStream) { $outputStream.Close() }
        if ($aes) { $aes.Dispose() }
        if ($encryptor) { $encryptor.Dispose() }
    }
}

# Function to decrypt a file
function Decrypt-File {
    param(
        [string]$InputFile,
        [string]$OutputFile,
        [byte[]]$Key
    )
    
    try {
        # Create AES object
        $aes = [System.Security.Cryptography.Aes]::Create()
        $aes.Key = $Key
        $aes.Mode = [System.Security.Cryptography.CipherMode]::CBC
        $aes.Padding = [System.Security.Cryptography.PaddingMode]::PKCS7
        
        # Read input file
        $inputStream = [System.IO.File]::OpenRead($InputFile)
        $outputStream = [System.IO.File]::Create($OutputFile)
        
        # Read IV from the beginning of the file
        $iv = New-Object byte[] $aes.IV.Length
        $bytesRead = $inputStream.Read($iv, 0, $iv.Length)
        if ($bytesRead -ne $aes.IV.Length) {
            throw "Invalid encrypted file format"
        }
        
        $aes.IV = $iv
        
        # Create decryptor
        $decryptor = $aes.CreateDecryptor()
        
        # Create CryptoStream
        $cryptoStream = New-Object System.Security.Cryptography.CryptoStream(
            $inputStream, 
            $decryptor, 
            [System.Security.Cryptography.CryptoStreamMode]::Read
        )
        
        # Buffer for reading/writing (1MB chunks)
        $buffer = New-Object byte[] 1048576
        $bytesRead = 0
        
        Write-Host "Decrypting file: $InputFile" -ForegroundColor Yellow
        
        do {
            $bytesRead = $cryptoStream.Read($buffer, 0, $buffer.Length)
            if ($bytesRead -gt 0) {
                $outputStream.Write($buffer, 0, $bytesRead)
            }
        } while ($bytesRead -gt 0)
        
        Write-Host "Decryption completed. Output: $OutputFile" -ForegroundColor Green
        
    }
    catch {
        Write-Error "Decryption failed: $($_.Exception.Message)"
        throw
    }
    finally {
        # Clean up resources
        if ($cryptoStream) { $cryptoStream.Close() }
        if ($inputStream) { $inputStream.Close() }
        if ($outputStream) { $outputStream.Close() }
        if ($aes) { $aes.Dispose() }
        if ($decryptor) { $decryptor.Dispose() }
    }
}

# Main script execution
try {
    # Get current directory
    $CurrentDirectory = Get-Location
    
    # Resolve full file path
    $InputFilePath = Join-Path $CurrentDirectory $FileInput
    
    # Check if file exists
    if (-not (Test-Path $InputFilePath)) {
        Write-Error "File '$FileInput' not found in current directory: $CurrentDirectory"
        exit 1
    }
    
    # Get file info
    $fileInfo = Get-Item $InputFilePath
    $fileName = $fileInfo.Name
    $fileExtension = $fileInfo.Extension
    $fileBaseName = [System.IO.Path]::GetFileNameWithoutExtension($fileName)
    
    # Derive AES key
    $aesKey = Get-AESKey -KeyString $KeyString
    
    # Determine operation based on file extension
    if ($fileExtension -eq '.encrypted') {
        # Decrypt the file
        $outputFileName = "$fileBaseName.decrypted"
        $outputPath = Join-Path $CurrentDirectory $outputFileName
        
        # Check if output file already exists
        if (Test-Path $outputPath) {
            $response = Read-Host "Output file '$outputFileName' already exists. Overwrite? (y/N)"
            if ($response -ne 'y' -and $response -ne 'Y') {
                Write-Host "Operation cancelled by user." -ForegroundColor Yellow
                exit 0
            }
        }
        
        Decrypt-File -InputFile $InputFilePath -OutputFile $outputPath -Key $aesKey
    }
    else {
        # Encrypt the file
        $outputFileName = "$fileBaseName.encrypted"
        $outputPath = Join-Path $CurrentDirectory $outputFileName
        
        # Check if output file already exists
        if (Test-Path $outputPath) {
            $response = Read-Host "Output file '$outputFileName' already exists. Overwrite? (y/N)"
            if ($response -ne 'y' -and $response -ne 'Y') {
                Write-Host "Operation cancelled by user." -ForegroundColor Yellow
                exit 0
            }
        }
        
        Encrypt-File -InputFile $InputFilePath -OutputFile $outputPath -Key $aesKey
    }
}
catch {
    Write-Error "Script execution failed: $($_.Exception.Message)"
    exit 1
}
